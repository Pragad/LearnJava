1. Integer Max and Min values
2. When to use Size / Length
3. Print array and nested array
4. Create array of certain size such that it can't grow beyond that
5. Read from Console using Scanner and BufferedReader
6. Convert ArrayList to Array in Java
6b. How to convert int[] into List<Integer> in Java?
6c. Integer[] to int[]
7. Read multiple lines from console
8. Find index of String in another string
9. Get substring from a String / StringBuilder
10. How do I apply the for-each loop to every character in a String
11. Don't assign one list to another
12. How can I initialize an ArrayList with all zeroes in Java?
13. Arrays.fill with multidimensional array in Java
14. Implement Comparator function
15. Java String to Int and Int to String
16. Difference between parseInt and valueOf in java?
17. Simple way to find if two different lists contain exactly the same elements?
18. CompareTo with primitives -> Integer / int
19. Java: is there an easy way to select a subset of an array?
20. Initialization of an ArrayList in one line
21. How to convert int[] into List<Integer> in Java?
22. How to set a default value for items list / array?
23. Get Size of data types
24. Remove last character from String and StringBuilder
25. Convert int to int array
26. Change char in a StringBuilder
27. String equals
28. String.charAt() goes out of bound if index is beyond string length
29. Everything except stack has isEmpty() while stack has empty()
------------------------------------------------------------------------------------------
1. Integer.MAX_VALUE

2. When to use Size / Length
   int[] arr: arr.length
   String: str.length()

3. Print array and nested array
   - Arrays.toString
   - Arrays.deepToString
   String[] array = new String[] {"John", "Mary", "Bob"};
   System.out.println(Arrays.toString(array));

   String[][] deepArray = new String[][] {{"John", "Mary"}, {"Alice", "Bob"}};
   System.out.println(Arrays.toString(deepArray));
   //output: [[Ljava.lang.String;@106d69c, [Ljava.lang.String;@52e922]
   System.out.println(Arrays.deepToString(deepArray));

4. Create array of certain size such that it can't grow beyond that
https://stackoverflow.com/questions/5196113/any-way-to-set-max-size-of-a-collection

        // In the below list "add" and "remove" won't work
        List<Integer> bl = Arrays.asList(new Integer[3]);
        // bl.add(5); // This throws UnsupportedOperationException
        bl.set(0, 6);
        bl.set(1, 7);
        bl.set(2, 8);
        // bl.set(3, 9); // This gives ArrayIndexOutOfBoundsException
 
5. Read from Console using Scanner and BufferedReader
https://stackoverflow.com/questions/8668073/get-integer-array-input-from-user-in-java
https://stackoverflow.com/questions/23506429/java-reading-multiple-ints-from-a-single-line

    1. Using BufferedReader
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    String  lines = br.readLine();    
    String[] strs = lines.trim().split("\\s+");
    for (int i = 0; i < strs.length; i++) {
        a[i] = Integer.parseInt(strs[i]);
    }

    2. Using scanner
    public static int [] readNumsFromCommandLine() {
        Scanner s = new Scanner(System.in);

        int count = s.nextInt();
        s.nextLine(); // throw away the newline.

        int [] numbers = new int[count];
        Scanner numScanner = new Scanner(s.nextLine());
        for (int i = 0; i < count; i++) {
            if (numScanner.hasNextInt()) {
                numbers[i] = numScanner.nextInt();
            } else {
                System.out.println("You didn't provide enough numbers");
                break;
            }
        }

        return numbers;
    }

6. Convert ArrayList to Array in Java

    String[] dsf = new String[al.size()];
    al.toArray(dsf);

    String names[]=list.toArray(new String[list.size()])

6a. Convert Array to ArrayList
    new ArrayList<Element>(Arrays.asList(array))

6b. How to convert int[] into List<Integer> in Java?
    There is no shortcut for converting from int[] to List<Integer> as Arrays.asList does not deal with boxing and will just create a List<int[]> which is not what you want. 

    List<Integer> Ints.asList(int...)
    
    int[] ints = {1,2,3};
    List<Integer> list = Arrays.stream(ints).boxed().collect(Collectors.toList());

6c. Integer[] to int[]
    1. Unfortunately, I don't believe there really is a better way of doing this due to the nature of Java's handling of primitive types, boxing, arrays and generics. In particular:

    List<T>.toArray won't work because there's no conversion from Integer to int

    2. Using strams:
        int[] array = list.stream().mapToInt(i->i).toArray();

    3. 
    In addition to Commons Lang, you can do this with Guava's method Ints.toArray(Collection<Integer> collection):

        List<Integer> list = ...
        int[] ints = Ints.toArray(list);

    4. 
        int[] toIntArray(List<Integer> list)  {
            int[] ret = new int[list.size()];
            int i = 0;
            for (Integer e : list)  
                ret[i++] = e.intValue();
            return ret;
        }

7. Read multiple lines from console
        List<String> lines = new ArrayList<>();
        Scanner s = new Scanner(System.in);
        while (s.hasNextLine()) {
            String line = s.nextLine();
            if (line.isEmpty()) {
                break;
            }
            lines.add(line);
        }

8. Find index of String in another string
    String.indexOf(String str)
    Boolean found = text.contains(word);

9. Get substring from a String / StringBuilder
    line.substring(line.indexOf("//") + 1);

10. How do I apply the for-each loop to every character in a String
    for (char ch: "xyz".toCharArray()) {
    }

    String s = "xyz";
    for(int i = 0; i < s.length(); i++) {
        char c = s.charAt(i);
    }

11. Don't assign one list to another
    https://stackoverflow.com/questions/10457087/how-to-copy-java-util-list-collection/10457114
    If you do, then modifying one list will modify another list too

    1.
    ArrayList<String> newArrayList = (ArrayList<String>) oldArrayList.clone();

    2.
    List<String> strs;
    ...
    List<String> newStrs = new ArrayList<>(strs);

    3.
    List<String> list2 = list1.stream().collect(Collectors.toList());

12. How can I initialize an ArrayList with all zeroes in Java?

    To initialize an list with 60 zeros you do:
    List<Integer> list = new ArrayList<Integer>(Collections.nCopies(60, 0));

13. Arrays.fill with multidimensional array in Java
    // Fill each row with 1.0
    for (double[] row: matrix)
        Arrays.fill(row, 1.0);

14. Implement Comparator function
https://stackoverflow.com/questions/5805602/how-to-sort-list-of-objects-by-some-property
        Collections.sort(intervals, new Comparator<Interval>() {
            public int compare(Interval a, Interval b) {
                return a.start > b.start ? 1 : a.start < b.start ? -1 : 0;
            }
        });

    Either make ActiveAlarm implement Comparable<ActiveAlarm> or implement Comparator<ActiveAlarm> in a separate class. Then call:
        Collections.sort(list);
    or
        Collections.sort(list, comparator);

    In general, it's a good idea to implement Comparable<T> if there's a single "natural" sort order... otherwise (if you happen to want to sort in a particular order, but might equally easily want a different one) it's better to implement Comparator<T>. This particular situation could go either way, to be honest... but I'd probably stick with the more flexible Comparator<T> option

15. Java String to Int and Int to String
		String s = "1234";
		int i = Integer.parseInt(s);
		System.out.println(i);
		
		i++;
		String t = String.valueOf(i);
		System.out.println(t);

16. Difference between parseInt and valueOf in java?
    Well, the API for Integer.valueOf(String) does indeed say that the String is interpreted exactly as if it were given to Integer.parseInt(String). However, valueOf(String) returns a new Integer() object whereas parseInt(String) returns a primitive int

    If you want to enjoy the potential caching benefits of Integer.valueOf(int), you could also use this eyesore:
        Integer k = Integer.valueOf(Integer.parseInt("123"))

    Now, if what you want is the object and not the primitive, then using valueOf(String) may be more attractive than making a new object out of parseInt(String) because the former is consistently present across Integer, Long, Double, etc

17. Simple way to find if two different lists contain exactly the same elements?
    If you care about order, then just use the equals method:
        list1.equals(list2)

18. CompareTo with primitives -> Integer / int
    Integer.compare(int, int)

    int cmp = a > b ? +1 : a < b ? -1 : 0;

19. Java: is there an easy way to select a subset of an array?
    Arrays.copyOfRange(array, 1, array.length);

20. Initialization of an ArrayList in one line
    Actually, probably the "best" way to initialize the ArrayList is the method you wrote, as it does not need to create a new List in any way:
        ArrayList<String> list = new ArrayList<String>();
        list.add("A");
        list.add("B");
        list.add("C");

21. How to convert int[] into List<Integer> in Java?

    There is no shortcut for converting from int[] to List<Integer> as Arrays.asList does not deal with boxing and will just create a List<int[]> which is not what you want. You have to make a utility method.

        int[] ints = {1, 2, 3};
        List<Integer> intList = new ArrayList<Integer>();
        for (int index = 0; index < ints.length; index++)
        {
            intList.add(ints[index]);
        }

22. How to set a default value for items list / array?

    Integer[] integers = new Integer[10];
    Arrays.fill(integers, 0);

    Collections.nCopies is your friend if you need a list instead of an array:
        List<Integer> list = Collections.nCopies(10, 0);
    If a mutable list is needed, wrap it:
        List<Integer> list = new ArrayList<>(Collections.nCopies(10, 0));

23. Get Size of data types
    Since Java 8, all wrapper classes of primitive types (except Boolean) have a BYTES field
        Double.BYTES 
        Integer.BYTES

    Pre Java 8 - Get size in bits and conver to bytes
        Double.SIZE / Byte.SIZE
        Integer.SIZE / Byte.SIZE

24. Remove last character from String and StringBuilder
    sb.setLength(sb.length() - 1);
    str = str.substring(0, str.length() - 1);

25. Convert int to int array
        String temp = Integer.toString(guess);
        int[] newGuess = new int[temp.length()];
        for (int i = 0; i < temp.length(); i++)
        {
            newGuess[i] = temp.charAt(i) - '0';
        }

26. Change char in a StringBuilder
    setCharAt()

27. String equals
    == tests for reference equality (whether they are the same object).
    .equals() tests for value equality (whether they are logically "equal").

28. String.charAt() goes out of bound if index is beyond string length

29. Java Datastructures
                Add         Get             Remove          Update      isPresent       Size        isEmpty     Clear
ArrayList       add         get                             set         indexOf         size        isEmpty     clear
Stack           push        pop/peek                                    search          size        empty
Queue           add/offer   element/peek   remove/poll                                              isEmpty
PiorityQueue    add/offer   peek           remove/poll                  contains        size        isEmpty     clear
LinkedList      add/offer   element/peek   remove/poll                                              isEmpty
HashSet         add                        remove                       contains        size        isEmpty     clear
HashMap         put         get            remove           put         containsKey     size        isEmpty     clear
LinkedHashMap   put         get            remove           put         containsKey     size        isEmpty     clear

String: chatAt, equals, compareTo, indexOf, isEmpty, length, valueOf, substring, startsWith, split
StringBuilder: reverse
Arrays: asList, binarySearch, fill, equals, sort

29. Everything except stack has isEmpty() while stack has empty()
