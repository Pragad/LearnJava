HOW TO RUN MONGODB:
    C:\Users\pragadhe>mongod - Will start the server
    C:\Users\pragadhe>mongo  - Will start the shell

Setting Up MongoDB:
    http://stackoverflow.com/questions/2404742/how-to-install-mongodb-on-windows
    - After installing MongoDB, create a /data/db directory
    - Run mongod from a cmd prompt
    - Run mongo from another prompt

    MongoDB Enterprise > db.names.insert({name: "Prag Thiru"})
    WriteResult({ "nInserted" : 1 })
    MongoDB Enterprise > db.names.find()
    { "_id" : ObjectId("57fd64c8ee435d20d5b1af97"), "name" : "Prag Thiru" }

Week 1:
    What is MongoDB?
        - It is a document database
        - There is no JOINS from multiple tables (unlike RDBMS where join is required across tables) various entries in the JSON object.
        - So Much easier to distribue or shrad data across multiple servers
        - Thus SCALE OUT is supported through SHARDING feature

        - Enables application developers to design data models for their application

    Building an App using Java and MongoDB
        - MongoD process is the Server that will be running
        - MongoDB shell is a fully functional javascript interpretor
            - Interacts with MongoD through TCP
        - Java Code, Freemarker, SparkJava

    CRUD: Create, Read, Update, Delete
        - Two databases
            i. local
            ii. test
        - "db" holds the current database that you are using
        - $use database_name
            - MongoDB will create a database in a lazy fashion (db will be created on 1st insert)
        - If NO _id is specified to a document, mongodb will insert one by itself
        - Return value of FIND is a cursor object
            
    Maven Dependencies:
        Adding JAVA_HOME to path
        http://stackoverflow.com/questions/10938635/setting-up-the-path-for-maven-3-0-4-win7
        C:\Users\pragadhe>SET JAVA_HOME=C:\Program Files\Java\jdk1.8.0_101

    Spark Web Framework:
        - http://sparkjava.com/documentation.html
        - Add it to Pom.xml of your project
        ERRRORS while creating Spark Application
            1. http://stackoverflow.com/questions/7421612/slf4j-failed-to-load-class-org-slf4j-impl-staticloggerbinder
            2. http://stackoverflow.com/questions/12532339/no-appenders-could-be-found-for-loggerlog4j
            3. http://stackoverflow.com/questions/12737293/how-do-i-resolve-the-java-net-bindexception-address-already-in-use-jvm-bind
            4. http://localhost:4567/

    Spark and Freemarker:
        - Using get(path,Route) instead of just get(Route)
        http://stackoverflow.com/questions/23898628/getting-error-route-in-route-cannot-be-applied-to-string

    Spark GET Requests:
        ANATOMY OF SPARK APPLICATION:
        - On the outside we have a web server which is Jetty server
        - Spark has an embedded Jetty Server
        - When a route is create, Jetty server gets started
        - When a request comes in to Jetty, Jetty forwards it to Spark Handler
        - Within Spark Handler we have one or more routes

        1. Browser sends a "GET /" request to Jetty.
        2. Jetty passes the request to Spark Handler. 
        3. Spark matches against GET / request to the appropriate handler and sends the response to client

        IMP: We can also use Wildcards to handle various types of request

    Spark POST requests
        - To handle form requests


COMMANDS:
    - use database_name
    - db.movies.insertOne({"title" : "harry potter", "year": 2005, "imdb":"tt98765" })
    - db.movies.find()
    - db.movies.find().pretty()
    - db.movies.find({"year" : 2010}).pretty()
    - var c = db.movies.find()
    - c.hasNext()
    - c.next()

    MVN Commands:
    The below command creates a mvn project
    > mvn archetype:generate

    Run a maven project by giving the Main Class using "-Dexec.mainclass"
    C:\PRAGADHE\DEV_GIT\LearnJava\JavaPractice\MongoDB\MongoDB_M101J\M101J>mvn clean compile exec:java -Dexec.mainClass=com.mongodb.App
