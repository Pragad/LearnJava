1. Why Java uses Heap instead of Stack
2. Access Specifiers
3. Early Binding
4. Object Base Class
5. What are Generics in Java
6. Heap and Stack Storage
7. How Garbage Collector Works
8. How JVM works
9. What is Escape Analysis:
10. Where objects are stored in Java
11. Hashtable HashMap LinkedHashMap TreeMap
12. How to make System.out.println() shorter
13. Using int vs Integer
14. How do I apply the for-each loop to every character in a String
15. Why can Java Collections not directly store Primitives types
16. Why is Java Vector class considered obsolete or deprecated
17. What is meant by immutable
18. Why is String immutable in Java
19. What does String Immutable mean
20. Combining charAt and IgnoreCasE
21. Adding Object to an ArrayList adds its reference
22. Java Constructors and Super Class
23. Exceptions
24. Final, Finally, Finalize
25. How to find index of min element in a list
26. Get current date and time
27. Priority Queue peek, element, poll, remove
28. Priority Queue Offer vs Add
29. for each loop in Java
30. Increment Value of a HashMap's Key
--------------------------------------------------------------------------------------------

1.
Why Java uses Heap instead of Stack
http://stackoverflow.com/questions/15558245/why-does-java-use-heap-data-structure-to-store-object
http://stackoverflow.com/questions/3646632/do-java-primitives-go-on-the-stack-or-the-heap

    Primitives defined locally would be on the stack. However if a primitive were defined as part of an instance of an object, that primitive would be on the heap.
        public class Test
        {
            private static class HeapClass
            {
                public int y; // When an instance of HeapClass is allocated, this will be on the heap.
            }
            public static void main(String[] args)
            {
                int x=1; // This is on the stack.
            }
        }

    With regards to the update:
        Objects do not have their own stack.
        In my example, int y would actually be part of each instance of HeapClass.
        Whenever an instance of HeapClass is allocated (e.g. new HeapClass()), all member variables of HeapClass are added to the heap.
        Thus, since instances of HeapClass are being allocated on the heap, int y would be on the heap as part of an instance of HeapClass.

    However, all primitive variables declared in the body of any method would be on the stack.

    As you can see in the above example, int x is on the stack because it is declared in a method body--not as a member of a class.

2.
Access Specifiers
    a. Public:    Everyone
    b. Private:   Only that class
    c. Protected: Inheriting Class
    d. Default  : Class in the same package

3.
Early Binding
    In Java, late binding is the default behavior

4. 
Object Base Class
    All objects are inherited from Object Base Class

5.
What are Generics in Java
http://docs.oracle.com/javase/tutorial/java/generics/erasure.html
http://stackoverflow.com/questions/490091/java-generics

    - A type of container

    Type Erasure
    Generics were introduced to the Java language to provide tighter type checks at compile time and to support generic programming.
    To implement generics, the Java compiler applies type erasure to:

        Replace all type parameters in generic types with their bounds or Object if the type parameters are unbounded. The produced bytecode, therefore, contains only ordinary classes, interfaces, and methods.
        Insert type casts if necessary to preserve type safety.
        Generate bridge methods to preserve polymorphism in extended generic types.

    Type erasure ensures that no new classes are created for parameterized types; consequently, generics incur no runtime overhead.

    Vectors hold any old object you give them.
        V.add("This is an element");
        V.add(new Integer(2));
        v.add(new Hashtable());

    To get back the item
        String s = (String) v.get(0);
        Integer i = (Integer) v.get(1);
        Hashtable h = (Hashtable) v.get(2);
    
    Generics attempt to create strongly typed classes to do generic operations.
        ArrayList<String> aList = new ArrayList<String>();
        aList.add("One");
        String element = aList.get(0); // no cast needed
        System.out.println("Got one: " + element);

http://www.tutorialspoint.com/java/java_generics.htm
        public class GenericMethodTest
        {
           // generic method printArray                         
           public static < E > void printArray( E[] inputArray )
           {
              // Display array elements              
                 for ( E element : inputArray ){        
                    System.out.printf( "%s ", element );
                 }
                 System.out.println();
            }

            public static void main( String args[] )
            {
                // Create arrays of Integer, Double and Character
                Integer[] intArray = { 1, 2, 3, 4, 5 };
                Double[] doubleArray = { 1.1, 2.2, 3.3, 4.4 };
                Character[] charArray = { 'H', 'E', 'L', 'L', 'O' };

                System.out.println( "Array integerArray contains:" );
                printArray( intArray  ); // pass an Integer array

                System.out.println( "\nArray doubleArray contains:" );
                printArray( doubleArray ); // pass a Double array

                System.out.println( "\nArray characterArray contains:" );
                printArray( charArray ); // pass a Character array
            } 
        }

6. 
Heap and Stack Storage
    - Objects are stored on Heap
    - Primitive types are stored on Stack

7.
How Garbage Collector Works
http://stackoverflow.com/questions/774357/how-does-the-garbage-collection-mechanism-work

    - The way actual memory gets allocated to variables and the way it is reclaimed is abstracted from the programmer.
    - The acutal where the memory gets allocated is abstracted

    - When the GARBAGE COLLECTOR runs it will check if we still hold a reference to an object. If not it will free that memory.

    SIMPLEST:
        Reference counting:
            - Whenever an object gets referenced, a count is incremented
            - GARBAGE Collector moves through ALL THE OBJECTS and frees the ones that has ref count as ZERO
            PROBLEM:
            - Circular reference

    MARK and SWEEP
        The mark and sweep algorithm works by periodically stopping the execution of the program, mark each item the program has allocated as unreachable.
        The program then runs through all the variables the program has and marks what they point to as reachable.
        If either of these allocations contain references to other data in the program, that data is then likewise marked as reachable, etc.

        This is the mark part of the algorithm.
        At this point everything the program can access, no matter how indirectly, is marked as reachable and everything the program can't reach is marked as unreachable.
        The garbage collector can now safely reclaim the memory associated with the objects marked as unreachable.

        SWEEP: takes care of freeing all objexts that are not reachable

        PROBLEM:
            - Entire Program has to be stopped

    ADAPTIVE GARBAGE COLLECTION:
        - START @ RAM's static and stack portion and go through all the OBJECTS
        - Copy all live objects to ANOTHER HEAP. 
        - Remove the objects from original heap

        PROBLEM:
            - Twice the memory

        SOLUTION:
            - Once program is stable, don't have to KEEP copying as LITTLE or NO GARBAGE would be generated.
            - JVM detects this and switch to M&S

8.
How JVM works
https://www.youtube.com/watch?v=viS5d8DA_VI

    a1.c ---              a1.obj
            |
            |
    a2.c ---> COMPILER -- a2.obj ---> LINKER --> a.exe
            |
            |
    a3.c ---              a3.obj

    LOADER puts a.exe into Main Memory

    IN JAVA:
        - .class FILE CONTAINS the BYTECODE
        - NO LINKING IS DONE
        - JVM RESIDES on RAM

        a1.java                 a1.class

        a2.java ---> COMPILER ->a2.class

        a3.java                 a3.class

        - CLASS LOADER puts all the CLASS files ONTO RAM
        - BYTECODE Verifier verfies the Byte Code
            - Checks for ACCESS VIOLATION errors etc
        - EXECUTION ENGINE
            - USE JIT COMPILER and converts BYTE CODE into MACHINE CODE

9.
What is Escape Analysis:
http://programmers.stackexchange.com/questions/65281/stack-and-heap-memory-in-java
    - Escape analysis determines all the places where a pointer can be stored and whether the lifetime of the pointer can be proven to be restricted only to the current procedure and/or thread.
    - JVMs can use a technique called escape analysis, by which they can tell that certain objects remain confined to a single thread for their entire lifetime, and that lifetime is bounded by the lifetime of a given stack frame.
    - Such objects can be safely allocated on the stack instead of the heap.
    - Even better, for small objects, the JVM can optimize away the allocation entirely and simply hoist the object's fields into registers.
    
    Thus, if you have code that looks like:

        void foo(int arg) {
            Bar qux = new Bar(arg);
            ...
        }

    where the ... doesn't allow qux to leave that scope, qux may be allocated on the stack instead.
    This is actually a win for the VM because it means it doesn't need to ever be garbage collected - it will disappear when it leaves the scope

10.
Where objects are stored in Java
http://programmers.stackexchange.com/questions/65281/stack-and-heap-memory-in-java
http://stackoverflow.com/questions/3646632/do-java-primitives-go-on-the-stack-or-the-heap
    - Java only stores primitives on the stack.
    - Objects are created on the heap

    - Only REFERENCES (which in turn are primitives) are passed around on the stack.

    - An OBJECT with all its variables are PUT on HEAP

    class A {
       int a ;
       String b;
       //getters and setters
    }

    - Where will the primitive a in class A be stored?
        - Depends on Escape analysis and JVM

    - Why does heap memory exist at all? Why can't we store everything on the stack?
        - Then we would have to pass the full set of values from one function to another.
        - With heap only a reference to it is required.
        - You could have a huge string that occupies the entire stack memory

    - Why Stack memory exists ?
        - Compilers can have stuffs without a stack
        - Eg BASICS which just had 8 registers
        - STACK gets rid of MEMORY FRAGMENTATION
        - Advantage of SCOPE. On leaving the SCOPE the stack is popped.

    Primitives defined locally would be on the stack. However if a primitive were defined as part of an instance of an object, that primitive would be on the heap.

        public class Test
        {
            private static class HeapClass
            {
                public int y; // When an instance of HeapClass is allocated, this will be on the heap.
            }
            public static void main(String[] args)
            {
                int x=1; // This is on the stack.
            }
        }

    Objects do not have their own stack.
    In my example, int y would actually be part of each instance of HeapClass.
    Whenever an instance of HeapClass is allocated (e.g. new HeapClass()), all member variables of HeapClass are added to the heap.
    Thus, since instances of HeapClass are being allocated on the heap, int y would be on the heap as part of an instance of HeapClass.

    However, all primitive variables declared in the body of any method would be on the stack.

    As you can see in the above example, int x is on the stack because it is declared in a method body--not as a member of a class.

11.
Hashtable HashMap LinkedHashMap TreeMap
http://www.programcreek.com/2013/03/hashmap-vs-treemap-vs-hashtable-vs-linkedhashmap/

    There are 4 commonly used implementations of Map in Java SE - HashMap, TreeMap, Hashtable and LinkedHashMap.
    If we use only one sentence to describe each implementation, it would be the following:

        HashMap is implemented as a hash table, and there is no ordering on keys or values.
        TreeMap is implemented based on red-black tree structure, and it is ordered by the key.
        LinkedHashMap preserves the insertion order
        Hashtable is synchronized, in contrast to HashMap. It has an overhead for synchronization.

        This is the reason that HashMap should be used if the program is thread-safe. 

12.
How to make System.out.println() shorter
http://stackoverflow.com/questions/3320764/how-to-make-system-out-println-shorter

    void println(Object line) {
        System.out.println(line);
    }

    println("Hello World");

13.
Using int vs Integer
http://stackoverflow.com/questions/564/what-is-the-difference-between-an-int-and-an-integer-in-java-and-c?rq=1

    If you can use int do so.
    If the value can be null or is used as an Object e.g. Generics, use Integer

    In Java an int is a primitive while an Integer is an Object. Meaning, if you made a new Integer:
        Integer i = new Integer(6);

    You could call some method on i:
        String s = i.toString();//sets s the string representation of i

    Whereas with an int:
        int i = 6;

    You cannot call any methods on it, because it is simply a primitive. So:
        String s = i.toString();//will not work!!!

14.
How do I apply the for-each loop to every character in a String
http://stackoverflow.com/questions/2451650/how-do-i-apply-the-for-each-loop-to-every-character-in-a-string

    for (char ch: "xyz".toCharArray()) {
    }

15.
Why can Java Collections not directly store Primitives types
http://stackoverflow.com/questions/2504959/why-can-java-collections-not-directly-store-primitives-types

    It was a Java design decision, and one that some consider a mistake.
    Containers want Objects and primitives don't derive from Object.

16.
Why is Java Vector class considered obsolete or deprecated
http://stackoverflow.com/questions/1386275/why-is-java-vector-class-considered-obsolete-or-deprecated

    Vector synchronizes on each individual operation.
    That's almost never what you want to do.

    Generally you want to synchronize a whole sequence of operations.
    Synchronizing individual operations is both less safe (if you iterate over a Vector, for instance, you still need to take out a lock to avoid anyone else changing the collection at the same time, which would cause a ConcurrentModificationException in the iterating thread) but also slower (why take out a lock repeatedly when once will be enough)?

    Of course, it also has the overhead of locking even when you don't need to.

    Basically, it's a very flawed approach to synchronization in most situations.

17.
What is meant by immutable
http://stackoverflow.com/questions/279507/what-is-meant-by-immutable

    Immutable means that once the constructor for an object has completed execution that instance can't be altered.

    This is useful as it means you can pass references to the object around, without worrying that someone else is going to change its contents.
    Especially when dealing with concurrency, there are no locking issues with objects that never change

    e.g.
    class Foo
    {
         private final String myvar;

         public Foo(final String initialValue)
         {
             this.myvar = initialValue;
         }

         public String getValue()
         {
             return this.myvar;
         }
    }

    Foo doesn't have to worry that the caller to getValue() might change the text in the string.

    If you imagine a similar class to Foo, but with a StringBuilder rather than a String as a member, you can see that a caller to getValue() would be able to alter the StringBuilder attribute of a Foo instance.

18.
Why is String immutable in Java
http://stackoverflow.com/questions/22397861/why-is-string-immutable-in-java
http://stackoverflow.com/questions/1552301/immutability-of-strings-in-java

    String is immutable for several reasons, here is a summary:

        Security: parameters are typically represented as String in network connections, database connection urls, usernames/passwords etc.
                  If it were mutable, these parameters could be easily changed.
        Synchronization and concurrency: making String immutable automatically makes them thread safe thereby solving the synchronization issues.
        Caching: When compiler optimizes your String objects, it sees that if two objects have same value (a="test", and b="test") and thus you need only one string object (for both a and b, these two will point to the same object).
        Class loading: String is used as arguments for class loading. If mutable, it could result in wrong class being loaded (because mutable objects change their state).

    That being said, immutability of String only means you cannot change it using its public API. You can in fact bypass the normal API using reflection. See the answer here.

    In your example, if String was mutable, then consider the following example:

      String a="stack";
      System.out.println(a);//prints stack
      a.setValue("overflow");
      System.out.println(a);//if mutable it would print overflow

19.
What does String Immutable mean
http://stackoverflow.com/questions/8798403/string-is-immutable-what-exactly-is-the-meaning

    Before proceeding further with the fuss of immutability, let's just take a look into the String class and its functionality a little before coming to conclusions about its immutability.

    This is how String works:
        String str = "knowledge";

    This, as usual, creates a string containing "knowledge" and assigns it a reference str.
    Simple enough? Lets perform some more functions:
         String s = str;     // assigns a new reference to the same string "knowledge"

    Lets see how the below statement works:
         str = str.concat(" base");

    This appends a string " base" to str. But wait, how is this possible, since String objects are immutable? Well to your surprise, it is.

    When the above statement is executed, the VM takes the value of String str, i.e. "knowledge" and appends " base", giving us the value "knowledge base".
    Now, since Strings are immutable, the VM can't assign this value to str, so it creates a new String object, gives it a value "knowledge base", and gives it a reference str.

    An important point to note here is that, while the String object is immutable, its reference variable is not.
    So that's why, in the above example, the reference was made to refer to a newly formed String object.

    At this point in the example above, we have two String objects: the first one we created with value "knowledge", pointed to by s, and the second one "knowledge base", pointed to by str.
    But, technically, we have three String objects, the third one being the literal "base" in the concat statement.

    IMPORTANT FACTS ABOUT STRING AND MEMORY USAGE:
        What if we didn't have another reference s to "knowledge"? We would have lost that String.
        However, it still would have existed, but would be considered lost due to having no references.
        Look at one more example below

            String s1 = "java";
            s1.concat(" rules");
            System.out.println("s1 refers to "+s1);  // Yes, s1 still refers to "java"

    What's happening:
        The first line is pretty straightforward: create a new String "java" and refer s1 to it.
        Next, the VM creates another new String "java rules", but nothing refers to it.
        So, the second String is instantly lost. We can't reach it.

    The reference variable s1 still refers to the original String "java".

    Almost every method, applied to a String object in order to modify it, creates new String object.
    So, where do these String objects go? Well, these exist in memory, and one of the key goals of any programming language is to make efficient use of memory.

    As applications grow, it's very common for String literals to occupy large area of memory, which can even cause redundancy.
    So, in order to make Java more efficient, the JVM sets aside a special area of memory called the "String constant pool".

    When the compiler sees a String literal, it looks for the String in the pool.
    If a match is found, the reference to the new literal is directed to the existing String and no new String object is created.
    The existing String simply has one more reference.
    Here comes the point of making String objects immutable:

    In the String constant pool, a String object is likely to have one or many references.
    If several references point to same String without even knowing it, it would be bad if one of the references modified that String value.
    That's why String objects are immutable.

    Well, now you could say, what if someone overrides the functionality of String class?
    That's the reason that the String class is marked final so that nobody can override the behavior of its methods.

20.
Combining charAt and IgnoreCasE
http://stackoverflow.com/questions/28387134/combining-charat-and-ignorecase

    (Character.toLowerCase(newGame.charAt(0)) == 'y');

21. Adding Object to an ArrayList adds its reference
http://stackoverflow.com/questions/7080546/add-an-object-to-an-arraylist-and-modify-it-later
    
    Q. 
    If I have an ArrayList, and I added an object to it, and later I modified this object, will this change reflect in the ArrayList?
    Or when I add the object to the ArrayList, Java creates a copy and add it to the ArrayList?

    What if I change the reference to this object to null?
    Does that mean that the object in the ArrayList now null too?

    Q: will this change reflect in the ArrayList?
    A: Yes, since you added a reference to the object in the list. The reference you added will still point to the same object, (which you modified).

    Q: or when I add the object to the ArrayList, Java creates a copy and add it to the ArrayList?
    A: No, it won't copy the object. (It will copy the reference to the object.)

    Q: What if I change the reference to this object to null? Does that mean that the object in the ArrayList now null too?
    A: No, since the content of the original reference was copied when added to the list. (Keep in mind that it is the reference that is copied, not the object.)

        Demonstration:
        StringBuffer sb = new StringBuffer("foo");

        List<StringBuffer> list = new ArrayList<StringBuffer>();
        list.add(sb);

        System.out.println(list);   // prints [foo]
        sb.append("bar");

        System.out.println(list);   // prints [foobar]
        sb = null;

        System.out.println(list);   // still prints [foobar]

22.
Java Constructors and Super Class
    
    1. If the FIRST LINE of the constructor is NOT a call to Super Class Constructor OR a call
    to ONE of its own constructor THEN the compiler will insert "super()" as the first line in
    the constructor

    2. Java WILL NOT insert a "super()" constructor if we already have one with arguments

    3. Always have a constructor with NO ARGUMENTS as java could add a "super()" and try to call
       a constructor with NO arguments.

23.
Exceptions
    - If a client can reasonably be expected to recover from an exception, make it a checked exception.
    - If a client cannot do anything to recover from the exception, make it an unchecked exception

    Checked Exception vs Unchecked Exception:
        - Checked Exception should be DECLARED in the method

        - Common exception such as NULL pointer exceptions are Unchecked exceptions

    UNCHECKED:
        - Unchecked are the exceptions that are not checked at compiled time.
        - In C++, all exceptions are unchecked, so it is not forced by the compiler to either handle or specify the exception.

24.
Final, Finally, Finalize
http://stackoverflow.com/questions/7814688/in-java-what-purpose-do-the-keywords-final-finally-and-finalize-fulfil

    1. final
        - final can be used to mark a variable "unchangeable"
            private final String name = "foo";  //the reference name can never change

        - final can also make a method not "overrideable"
            public final String toString() {  return "NULL"; }

        - final can also make a class not "inheritable". i.e. the class can not be subclassed
            public final class finalClass {...}
            public class classNotAllowed extends finalClass {...} // Not allowed

    2. finally
        - finally is used in a try/catch statement to execute code "always"
            lock.lock();
            try {
              //do stuff
            } catch (SomeException se) {
              //handle se
            } finally {
              lock.unlock(); //always executed, even if Exception or Error or se
            }

        Java 7 has a new try with resources statement that you can use to automatically close resources that explicitly or implicitly implement java.io.Closeable or java.lang.AutoCloseable

    3. finalize
        finalize is called when an object is garbage collected. You rarely need to override it.
        An example:
            protected void finalize() {
              //free resources (e.g. unallocate memory)
              super.finalize();
            }

25.
How to find index of min element in a list
http://stackoverflow.com/questions/15995458/how-to-find-the-minimum-value-in-an-arraylist-along-with-the-index-number-jav

    int minIndex = list.indexOf(Collections.min(list));

26.
Get current date and time
http://stackoverflow.com/questions/833768/java-code-for-getting-current-time

    new java.util.Date() : Human Readable Format
    System.currentTimeMillis() : 1478422910095

27.
Priority Queue peek, element, poll, remove
http://www.davismol.net/2014/04/04/java-ocpjp7-difference-between-element-peek-poll-and-remove-methods-of-the-queue-interface/

    The peek() method retrieves the value of the first element of the queue without removing it from the queue.
    For each invocation of the method we always get the same value and its execution does not affect the size of the queue. If the queue is empty the peek() method returns null.

    The element() method behaves like peek(), so it again retrieves the value of the first element without removing it. Unlike peek ), however, if the list is empty element() throws a NoSuchElementException

    The poll() method retrieves the value of the first element of the queue by removing it from the queue.
    At each invocation it removes the first element of the list and if the list is already empty it returns null but does not throw any exception

    The remove() method behaves as the poll() method, so it removes the first element of the list and if the list is empty it throws a NoSuchElementException

28.
Priority Queue Offer vs Add
http://stackoverflow.com/questions/2703984/what-is-the-difference-between-the-add-and-offer-methods-in-a-queue-in-java

    The Queue interface specifies that add() will throw an IllegalStateException if no space is currently available (and otherwise return true) while offer() will return false if the element couldn't be inserted due to capacity restrictions.

29.
for each loop in Java

    for (int intValue : test) {
        // do some work here on intValue
    }

30.
Increment Value of a HashMap's Key
http://stackoverflow.com/questions/4157972/how-to-update-a-value-given-a-key-in-a-java-hashmap

    - map.put(key, map.get(key) + 1);
    - Replace Integer by AtomicInteger and call one of the incrementAndGet/getAndIncrement methods on it.
    - An alternative is to wrap an int in your own MutableInteger class which has an increment()


